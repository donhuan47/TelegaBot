import telebot
from telebot import types
import random
import sqlite3
from datetime import datetime, time, date
datetime.now()

bot=telebot.TeleBot("1692964167:AAEMMwSeQVkGUyXJrKSwT0hpMygLhqKAOBc", parse_mode='html')

db=sqlite3.connect('dbold.db'); sql=db.cursor()
		
# Create main keyboard
markup=types.ReplyKeyboardMarkup(resize_keyboard=True)
item1=types.KeyboardButton('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —É—Ä–æ–∫–æ–≤');
item2=types.KeyboardButton('–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å');   item3=types.KeyboardButton('–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã');
item4=types.KeyboardButton('–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏');  item5=types.KeyboardButton('–ù–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏');
item6=types.KeyboardButton('–û—Ç–≥–∞–¥–∞–π —á–∏—Å–ª–æ');
item7=types.KeyboardButton('ü•ï–°–µ–≥–æ–¥–Ω—è –≤ —Å—Ç–æ–ª–æ–≤–æ–πü•ï')
item8=types.KeyboardButton('–õ—É—á—à–∏–µ —É—á–µ–Ω–∏–∫–∏');  item9=types.KeyboardButton('–•–æ—á—É —Å–∫–∞–∑–∞—Ç—å');
item10=types.KeyboardButton('–ì–æ–ª–æ—Å–æ–≤–∞–µ–Ω–∏–µ');   item11=types.KeyboardButton('–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç')
markup.add(item1, item2, item3, item4, item5, item6,item7,item8,item9,item10,item11)

@bot.message_handler(commands=['start'])
def welcome(message):
    sti=open('sti.tgs','rb')
    bot.send_sticker(message.chat.id,sti)
    bot.send_message(message.chat.id,
     '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {0.first_name}!\n —è <b>{1.first_name}</b>,  –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'.format(message.from_user,bot.get_me()),
                     reply_markup=markup ) #add keyboard to message
                    
@bot.message_handler(commands=['addnews','add']) #–ö–û–ú–ê–ù–î–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ù–û–í–û–°–¢–ò –¢–û–õ–¨–ö–û –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í
def addnews_step1(message):
 markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
 markup.add('1', '2','3','4','5','–û–¢–ú–ï–ù–ê')
 msg =bot.reply_to(message,'–í—ã–±–µ—Ä–∏ –≤–∞–∂–Ω–æ—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–∏', reply_markup=markup )
 bot.register_next_step_handler(msg, addnews_step2)
def addnews_step2(message):
 if message.text=='–û–¢–ú–ï–ù–ê':  bot.send_message(message.chat.id,'OK', reply_markup=markup );return # –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–±–∏—Ä–∞–µ—Ç—Å—è
 global nn; nn=message.text; # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
 my_news=bot.reply_to(message, '–í–≤–µ–¥–∏ –Ω–æ–≤–æ—Å—Ç—å')
 bot.register_next_step_handler(my_news, addnews_step3)
def addnews_step3(my_news):
 bot.send_message(my_news.chat.id,'–í–≤–µ–¥–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: '+my_news.text+ '\n –í–∞–∂–Ω–æ—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ '+ nn, reply_markup=markup  )
 db=sqlite3.connect('db.db'); sql=db.cursor()
 sql.execute('CREATE TABLE IF NOT EXISTS `news` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `news` TEXT)')
 sql.execute("INSERT INTO `news`(id, news) VALUES ( NULL, (?))",(my_news.text,))#–ó–ü–¢ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê –¢–ö –Ω—É–∂–µ–Ω –∫–æ—Ä—Ç–µ–∂
 db.commit()
 news=sql.execute(' SELECT * FROM `news` ').fetchall();
 for n in news:
  print( n  )  # –ü–ï–ß–ê–¢–¨ –í–°–ï–• –ù–û–í–û–°–¢–ï–ô –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏

 
   
@bot.message_handler(commands=['deletenews','—É–¥–∞–ª–∏—Ç—å','delete']) #–ö–û–ú–ê–ù–î—ã –£–î–ê–õ–ï–ù–ò–Ø –ù–û–í–û–°–¢–ò  (–î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í)
def delete_news(message):
 if message.text.isdigit():
  msg = bot.send_message(message.chat.id, '–£–¥–∞–ª–∏–ª–∏ '+message.text)
 db=sqlite3.connect('db.db'); sql=db.cursor()
 sql.execute('CREATE TABLE IF NOT EXISTS `news` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `news` TEXT)')
 news=sql.execute(' SELECT * FROM `news` ').fetchall();
 for n in news:
  print( n  )  # –í–´–í–û–î –í–°–ï–• –ù–û–í–û–°–¢–ï–ô –° –ò–• –ò–ù–î–ï–ö–°–û–ú –Ω–æ–≤–æ—Å—Ç–∏
  bot.send_message(message.chat.id, f' <b>id {n[0]}-></b>   {n[1]} ' )
 msg =bot.reply_to(message,'–ö–∞–∫—É—é –Ω–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–∏—Ç—å. 0 = –û–¢–ú–ï–ù–ê')
 bot.register_next_step_handler(msg, delete_news_step2)
def delete_news_step2(message):
 if message.text=='0': bot.send_message(message.chat.id, '–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=markup ); return
 if not message.text.isdigit():
  msg = bot.send_message(message.chat.id, '–ù–∞–¥–æ –≤–≤–µ—Å—Ç–∏ id –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (0 –¥–ª—è –æ—Ç–º–µ–Ω—ã)->')
  bot.register_next_step_handler(msg, delete_news_step2) ;  return
 db=sqlite3.connect('db.db'); sql=db.cursor()
 sql.execute('DELETE FROM news WHERE id=(?)',(int(message.text),))
 db.commit()
 delete_news(message)
 
     
  
isRunning=False
@bot.message_handler(content_types=['text'])
def lalala(message):
   # bot.reply_to(message, message.text)
   # bot.send_message(message.chat.id,message.text)
   #if message.chat.type=='private':
 if message.text=='–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —É—Ä–æ–∫–æ–≤':

    bot.send_message(message.chat.id,"–°–µ–π—á–∞—Å " + str(datetime.now()))
 elif message.text=='BackToMain':
   # bot.send_message(message.chat.id, '4444', reply_markup=markup3) # –ü–û–ß–ï–ú–£ –ù–ï –í–û–ó–í–†–ê–©–ê–ï–¢–°–Ø –ì–õ–ê–í–ù–ê–Ø –ö–õ–ê–í–ê markup
   pass      
 elif message.text=='–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å':
    markup = types.InlineKeyboardMarkup(row_width=2)
    item1 = types.InlineKeyboardButton("–ö–û–ù–ï–ß–ù–û", callback_data='good')
    item2 = types.InlineKeyboardButton("–Ω–µ –æ—Å–æ–±–æ", callback_data='bad')
    markup.add(item1, item2)
    bot.send_message(message.chat.id, '–õ—é–±–∏—à—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫—É?', reply_markup=markup)

 elif message.text=='–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã':
    bot.send_message(message.chat.id, '–ù–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω +79999999999‚ò∫\n–ê–¥—Ä–µ—Å: –≥.–ú–æ—Å–∫–≤–∞')
         
 elif message.text=='–ù–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏':
    pic=open('me.jpg','rb');  bot.send_photo(message.chat.id,pic); bot.send_message(message.chat.id,  'HELLO)')
    pic=open('me2.jpg','rb'); bot.send_photo(message.chat.id,pic)
    bot.send_message(message.chat.id,  'THIS IS ME')

 elif message.text=='–û—Ç–≥–∞–¥–∞–π —á–∏—Å–ª–æ':
         global isRunning; isRunning = False
         if not isRunning:
          global x; x=random.randint(1,100) ; print(x)
          msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —á–∏—Å–ª–æ (0->for STOP)')
          bot.register_next_step_handler(msg, check)
          isRunning = True

 elif message.text=='ü•ï–°–µ–≥–æ–¥–Ω—è –≤ —Å—Ç–æ–ª–æ–≤–æ–πü•ï':
  db=sqlite3.connect('db.db'); sql=db.cursor()
#   sql.execute('CREATE TABLE IF NOT EXISTS stolovaya (id INTEGER PRIMARY KEY AUTOINCREMENT  DEFAULT (1) , zavtrak TEXT  DEFAULT ZZZ, obed TEXT  DEFAULT ZZZ)');
#   zavtrak=sql.execute('SELECT `zavtrak` FROM `stolovaya` WHERE `id` = 1').fetchall()[0][0]
#   obed=sql.execute('SELECT `obed` FROM `stolovaya` WHERE `id` = 1').fetchall()[0][0]
#   bot.send_message(message.chat.id, '<b>üçéüçâ–ú–ï–ù–Æ:üçìüçä\n<u>–ó–ê–í–¢–†–ê–ö:</u></b>'+ zavtrak +"\n<b><u>–û–ë–ï–î:</u></b>"+ obed, parse_mode='html')
    
 elif message.text=='–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç':
   db=sqlite3.connect('db.db'); sql=db.cursor()
#   sql.execute('CREATE TABLE IF NOT EXISTS facts (fact_id INTEGER PRIMARY KEY AUTOINCREMENT, fact TEXT)');
#    # sql.execute(f"INSERT INTO users VALUES ('{message.chat.id}','{666}',{0},{True})")
#   num_facts=sql.execute('SELECT COUNT (*) FROM `facts` ').fetchall()[0][0] # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Å —Ñ–∞–∫—Ç–∞–º–∏ –∏–∑ –ë–î
#   fact=sql.execute(f'SELECT `fact` FROM `facts` WHERE `fact_id` = {random.randint(1,num_facts)}').fetchall()
   # db.commit()     
     
  #bot.send_message(message.chat.id, fact, parse_mode='html')
    
 elif message.text=='–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏':
  db=sqlite3.connect('db.db'); sql=db.cursor()
  sql.execute('CREATE TABLE IF NOT EXISTS news (id INTEGER PRIMARY KEY AUTOINCREMENT, news TEXT)')
  news=sql.execute(' SELECT * FROM `news` ').fetchall() 
  for n in news:   
   bot.send_message(message.chat.id, n [1] )  
   print(n) 
 
 else:
    bot.send_message(message.chat.id, message.text+' –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ üò¢')
	   
def check(message):
    if message.text=='0': isRunning = False; return
    if not message.text.isdigit()  :
        msg = bot.send_message(message.chat.id, 'Enter number 1..100 again (0 for end Game)->')
        bot.register_next_step_handler(msg, check) 
        return
    y=int(message.text)
    if y >x :
        msg = bot.send_message(message.chat.id, message.text+ ' –ú–ù–û–ì–û!' )
        bot.register_next_step_handler(msg, check)
    elif y<x :
        msg = bot.send_message(message.chat.id, message.text+ ' –ú–ê–õ–û!' )
        bot.register_next_step_handler(msg, check)
    else:
        msg = bot.send_message(message.chat.id, message.text+ ' –£–ì–ê–î–ê–õ!' )
    isRunning = False	   

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'good':
                bot.send_message(call.message.chat.id, '–ú–æ–ª–æ–¥–µ—Ü! –î–∞–≤–∞–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å üòä')
            elif call.data == 'bad':
                bot.send_message(call.message.chat.id, '–ó—Ä—è üò¢')
                bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
                text=" –ë–æ—Ç –æ–±–∏–¥–µ–ª—Å—è ")
            # remove inline buttons
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ü–æ–Ω—è—Ç–Ω–æ",
                reply_markup=None)
 
            # show alert
           
 
    except Exception as e:
        print(repr(e))
 
# RUN   
		   
		   
bot.polling(none_stop=True)
