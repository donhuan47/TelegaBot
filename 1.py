import telebot
from telebot import types
import random  # id=random.randint(1,100)

import sqlite3
from datetime import datetime, time, date

print(datetime.now());  # print (datetime.strftime(datetime.now(), "%Y.%m.%d %H:%M:%S") )
print(datetime.strftime(datetime.now(), "%Y.%m.%d"))

bot = telebot.TeleBot("1692964167:AAEMMwSeQVkGUyXJrKSwT0hpMygLhqKAOBc", parse_mode='html')
# print(dir (bot.get_chat_member))
# print (locals())

markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # Create main keyboard
markup.add('–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏', '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ (QUIZ)', '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
           '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç', '–°—Ç–µ–Ω–∞ –≤–∞—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π', '–õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã',
           '–ì–æ–ª–æ—Å–æ–≤–∞–µ–Ω–∏–µ(–Ω–µ—Ç)', '–í–æ–ø—Ä–æ—Å', '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
           '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —É—Ä–æ–∫–æ–≤', '–ü–æ–º–æ—â—å(–Ω–µ—Ç)', 'ü•ï–°–µ–≥–æ–¥–Ω—è –≤ —Å—Ç–æ–ª–æ–≤–æ–πü•ï')


@bot.message_handler(commands=['start'])
def welcome(message):
    sti = open('sti.tgs', 'rb');
    bot.send_sticker(message.chat.id, sti);
    log()
    log('', message.from_user.first_name)  # print(message.from_user.id) # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π id —é–∑–µ—Ä–∞ –≤ —Ç–µ–ª–µ–≥–µ
    db = sqlite3.connect('db.db');
    sql = db.cursor()  # print( message  )
    sql.execute(
        'CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY , name TEXT, score INTEGER DEFAULT (0), grade INTEGER)')
    result = sql.execute(' SELECT * FROM users WHERE id= (?) ', (message.from_user.id,)).fetchall();
    if len(result) == 0:  # –ï–°–õ–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ù–ï–¢ –í –ë–î, –ó–ê–ù–û–°–ò–ú –ï–ì–û –í –ë–î
        markup2 = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup2.add('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '–£—á–∏—Ç–µ–ª—å', '–î—Ä—É–≥–æ–µ')
        msg = bot.send_message(message.chat.id,
                               """–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {0.first_name}.
      –í—ã —Ç—É—Ç –ø–µ—Ä–≤—ã–π —Ä–∞–∑.\n –° –≤–∞–º–∏ –≥–æ–≤–æ—Ä–∏—Ç {1.first_name}. –Ø –ø–æ–∫–∞ –Ω–∞ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.
      –£–∫–∞–∂–∏—Ç–µ –≤ –∫–∞–∫–æ–º –∫–ª–∞—Å—Å–µ –≤—ã —É—á–∏—Ç–µ—Å—å""".format(message.from_user, bot.get_me()), reply_markup=markup2)
        bot.register_next_step_handler(msg, reg_user)
    else:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –ë–î
        bot.send_message(message.chat.id,
                         f"""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}.
      –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.\n """, reply_markup=markup)


def reg_user(message):  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∫–ª–∞—Å—Å –≤ –ë–î
    db = sqlite3.connect('db.db');
    sql = db.cursor();
    if message.text == '–£—á–∏—Ç–µ–ª—å':  message.text = '13'  # –£—á–∏—Ç–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ 0 –∫–ª–∞—Å—Å–æ–º; 1494 –∫–ª–∞—Å—Å –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ –õ–° –∏–Ω–¥–∏–≤–∏—É–∞–ª—å–Ω–æ)
    sql.execute("INSERT INTO users (id, name, grade) VALUES (?, ?, ?)",
                (message.from_user.id, message.from_user.first_name, int(message.text)))
    db.commit();  # print(message.from_user.id, message.from_user.first_name, int(message.text) )
    bot.send_message(message.chat.id, "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –≤–∞—Å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É", reply_markup=markup)


@bot.message_handler(commands=['admin', 'test'])
def admin_info(message):
    log('', message.from_user.first_name)
    bot.send_message(message.chat.id, """<b>–ö–û–ú–ú–ê–ù–î–´ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í –±–æ—Ç–∞:
–†–ê–ë–û–¢–ê –° –ü–û–°–õ–ï–î–ù–ò–ú–ò –ù–û–í–û–°–¢–Ø–ú–ò</b>
/addnews, /add - –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é  –Ω–æ–≤–æ—Å—Ç—å –ú–æ–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –ª—é–±—É—é
/deletenews ,/delete –ö–û–ú–ê–ù–î–´ –£–î–ê–õ–ï–ù–ò–Ø –ü–û–°–õ–ï–î–ù–ò–• –ù–û–í–û–°–¢–ò

–†–ê–ë–û–¢–ê –° –†–ê–ó–î–ï–õ–û–ú –ò–ù–¢–ï–†–ï–°–ù–´–• –§–ê–ö–¢–û–í (–ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–≥–ª\—Ñ—Ä–∞–Ω\–Ω–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ –∏–¥–∏–æ–º—ã –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–Ω–∏—è –æ—á–∫–æ–≤)
/addfact, /addf –ö–û–ú–ê–ù–î–´ –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ò–ù–¢–ï–†–ï–°–ù–û–ì–û –§–ê–ö–¢–ê
/delfacat /delf /deletef  –ö–û–ú–ê–ù–î–´ –£–¥–∞–ª–µ–Ω–∏—è –ò–ù–¢–ï–†–ï–°–ù–û–ì–û –§–ê–ö–¢–ê)

–†–ê–ë–û–¢–° –° –ú–ï–ù–Æ –°–¢–û–õ–û–í–û–ô –ù–ê –¢–ï–ö–£–©–ò–ô –î–ï–ù–¨
/makemenu /composehmenu /vewmeals /eda /food  –ö–û–ú–ê–ù–î–´ –§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø –ú–ï–ù–Æ –î–õ–Ø –°–¢–û–õ–û–í–û–ô –ò–ó –ë–õ–Æ–î –í –ë–î(–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–µ —É–¥–æ–±–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª. –ú–æ–∂–Ω–æ —É–ø—Ä–æ—Å—Ç–∏—Ç—å)
/showmeals /vsebluda /viewmeals /allmeals #–ö–û–ú–ê–ù–î–´ –ü–û–ö–ê–ó–ê –í–°–ï–• –ë–õ–Æ–î –ó–ê–ü–ò–°–ê–ù–ù–´–• –í –ë–î

/addquestion /addq /newquestion /newq   # –ö–û–ú–ê–ù–î–´ –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í–û–ü–†–û–°–ê –î–õ–Ø –í–ò–ö–¢–û–†–ò–ù–´
–í –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–∞–º —Ä–∞–∑–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞ –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∞—Å—Å–∞
–í–æ–∑–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ë–û–¢ –Ω–∞ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø—Ä–æ–¥—É–º—ã–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
–ê–ö–¢–ò–í–ò–†–û–í–ê–¢–¨ –ë–û–¢–ê: /start
""")


# ------------------------–ù–ê–ß–ê–õ–û –†–ê–ë–û–¢–´ –° –ù–û–í–û–°–¢–Ø–ú–ò
@bot.message_handler(commands=['addnews', 'add'])  # –ö–û–ú–ê–ù–î–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ù–û–í–û–°–¢–ò –¢–û–õ–¨–ö–û –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í
def addnews_step1(message):
    log('', message.from_user.first_name)
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.add('–î–õ–Ø –£–ß–ï–ù–ò–ö–û–í', '–î–õ–Ø –£–ß–ò–¢–ï–õ–ï–ô', '–î–õ–Ø –í–°–ï–•', '–û–¢–ú–ï–ù–ê')
    msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤–æ—Å—Ç–∏ (–ø–æ–∫–∞ –Ω–µ –∏–º–µ–µ—Ç —Ä–∞–∑–Ω–∏—Ü—ã)', reply_markup=markup)
    bot.register_next_step_handler(msg, addnews_step2)


def addnews_step2(message):
    if message.text == '–û–¢–ú–ï–ù–ê':  bot.send_message(message.chat.id, 'OK',
                                                   reply_markup=markup);return  # –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–±–∏—Ä–∞–µ—Ç—Å—è
    category = message.text;  # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤–æ—Å—Ç–∏
    my_news = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç—å')
    bot.register_next_step_handler(my_news, addnews_step3, category)


def addnews_step3(my_news, category):
    log('', message.from_user.first_name)
    bot.send_message(my_news.chat.id, '–í–≤–µ–¥–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: ' + my_news.text + '\n –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–æ–≤–æ—Å—Ç–∏ ' + category,
                     reply_markup=markup)
    db = sqlite3.connect('db.db');
    sql = db.cursor()
    sql.execute('CREATE TABLE IF NOT EXISTS news (id INTEGER PRIMARY KEY AUTOINCREMENT, news_text TEXT)')
    sql.execute("INSERT INTO news(news_text) VALUES (?)", (my_news.text,))  # –ó–ü–¢ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê –¢–ö –Ω—É–∂–µ–Ω –∫–æ—Ä—Ç–µ–∂
    db.commit()
    # news=sql.execute(' SELECT * FROM news').fetchall();
    # for n in news:  print( n  )  # –ü–ï–ß–ê–¢–¨ –í–°–ï–• –ù–û–í–û–°–¢–ï–ô –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏


@bot.message_handler(commands=['deletenews', 'delete'])  # –ö–û–ú–ê–ù–î—ã –£–î–ê–õ–ï–ù–ò–Ø –ù–û–í–û–°–¢–ò  (–î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í)
def delete_news(message):
    log('', message.from_user.first_name)
    if message.text.isdigit():
        msg = bot.send_message(message.chat.id, '–£–¥–∞–ª–∏–ª–∏ ' + message.text)
    db = sqlite3.connect('db.db');
    sql = db.cursor()
    sql.execute('CREATE TABLE IF NOT EXISTS news (id INTEGER PRIMARY KEY AUTOINCREMENT, news_text TEXT)')
    news = sql.execute(' SELECT * FROM news').fetchall();
    for n in news:  # –í–´–í–û–î –í–°–ï–• –ù–û–í–û–°–¢–ï–ô –° –ò–• –ò–ù–î–ï–ö–°–û–ú –Ω–æ–≤–æ—Å—Ç–∏
        bot.send_message(message.chat.id, f'<b>id {n[0]}-></b>   {n[1]}');
        print('ready to del news', n)
    msg = bot.send_message(message.chat.id, '–ö–∞–∫—É—é –Ω–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–∏—Ç—å?\n –í–≤–µ–¥–∏—Ç–µ id\n –í–≤–µ–¥–∏—Ç–µ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã')
    bot.register_next_step_handler(msg, delete_news_step2)


def delete_news_step2(message):
    if message.text == '0': bot.send_message(message.chat.id, '–£–¥–∞–ª–µ–Ω–∏–µ –æ–∫–æ–Ω—á–µ–Ω–æ', reply_markup=markup); return
    if not message.text.isdigit():
        msg = bot.send_message(message.chat.id, '–ù–∞–¥–æ –≤–≤–µ—Å—Ç–∏ id –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (0 –¥–ª—è –æ—Ç–º–µ–Ω—ã)->')
        bot.register_next_step_handler(msg, delete_news_step2);
        return
    db = sqlite3.connect('db.db');
    sql = db.cursor()
    sql.execute('DELETE FROM news WHERE id=(?)', (int(message.text),))
    db.commit()
    delete_news(message)


def latest_news(message):  # –í—ã–≤–æ–¥ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ —ç–∫—Ä–∞–Ω
    log('', message.from_user.first_name)
    db = sqlite3.connect('db.db');
    sql = db.cursor()
    sql.execute('CREATE TABLE IF NOT EXISTS news (id INTEGER PRIMARY KEY AUTOINCREMENT, news_text TEXT)')
    news = sql.execute('SELECT news_text FROM news').fetchall()
    for n in news:     bot.send_message(message.chat.id, n[0]);  print(
        message.from_user.first_name + ' —Å–º–æ—Ç—Ä–∏—Ç –Ω–æ–≤–æ—Å—Ç—å,', n)


# ------------------------–ö–û–ù–ï–¶ –†–ê–ë–û–¢–´ –° –ù–û–í–û–°–¢–Ø–ú–ò

# ------------------------–ù–ê–ß–ê–õ–û –†–ê–ë–û–¢–´ –° –ò–ù–¢–ï–†–ï–°–ù–´–ú–ò –§–ê–ö–¢–ê–ú–ò
@bot.message_handler(commands=['addfact', 'addf'])  # –ö–û–ú–ê–ù–î–´ –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ò–ù–¢–ï–†–ï–°–ù–û–ì–û –§–ê–ö–¢–ê
def addf(message):
    log('', message.from_user.first_name)
    if message.text == '0':  bot.send_message(message.chat.id, 'OK',
                                              reply_markup=markup);return  # –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–±–∏—Ä–∞–µ—Ç—Å—è
    nf = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç')
    bot.register_next_step_handler(nf, addf2)


def addf2(my_fact):
    # bot.send_message(my_news.chat.id,'–í–≤–µ–¥–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: '+my_news.text+ '\n –í–∞–∂–Ω–æ—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ '+ nn, reply_markup=markup  )
    db = sqlite3.connect('db.db');
    sql = db.cursor()
    sql.execute('CREATE TABLE IF NOT EXISTS `facts` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `fact` TEXT)')
    sql.execute("INSERT INTO `facts`(id, fact) VALUES ( NULL, (?))", (my_fact.text,))  # –ó–ü–¢ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê –¢–ö –Ω—É–∂–µ–Ω –∫–æ—Ä—Ç–µ–∂
    db.commit()
    factsList = sql.execute(' SELECT * FROM `facts` ').fetchall()
    for n in factsList:
        print(n)  # –ü–ï–ß–ê–¢–¨ –í–°–ï–• –§–∞–∫—Ç–æ–≤ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏


@bot.message_handler(commands=['delfacat', 'delf', 'deletef'])  # –ö–û–ú–ê–ù–î–´ –£–¥–∞–ª–µ–Ω–∏—è –ò–ù–¢–ï–†–ï–°–ù–û–ì–û –§–ê–ö–¢–ê)
def delf(message):
    log('', message.from_user.first_name)
    if message.text.isdigit():
        msg = bot.send_message(message.chat.id, '–£–¥–∞–ª–∏–ª–∏ ' + message.text)
    db = sqlite3.connect('db.db');
    sql = db.cursor()
    sql.execute('CREATE TABLE IF NOT EXISTS `facts` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `fact` TEXT)')
    factsList = sql.execute(' SELECT * FROM `facts` ').fetchall()
    for n in factsList:
        print(n)  # –í–´–í–û–î –í–°–ï–• –ù–û–í–û–°–¢–ï–ô –° –ò–• –ò–ù–î–ï–ö–°–û–ú –Ω–æ–≤–æ—Å—Ç–∏
        bot.send_message(message.chat.id, f' <b>id {n[0]}-></b>   {n[1]} ')
    msg = bot.send_message(message.chat.id, '–ö–∞–∫—É—é –Ω–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–∏—Ç—å. 0 = –û–¢–ú–ï–ù–ê')
    bot.register_next_step_handler(msg, delf2)


def delf2(message):
    if message.text == '0': bot.send_message(message.chat.id, '–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'); return
    if not message.text.isdigit():
        msg = bot.send_message(message.chat.id, '–ù–∞–¥–æ –≤–≤–µ—Å—Ç–∏ id —Ñ–∞–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (0 –¥–ª—è –æ—Ç–º–µ–Ω—ã)->')
        bot.register_next_step_handler(msg, delf2);
        return
    db = sqlite3.connect('db.db');
    sql = db.cursor()
    sql.execute('DELETE FROM facts WHERE id=(?)', (int(message.text),))
    db.commit()
    delf(message)


def view_fact(message):
    log('', message.from_user.first_name)
    db = sqlite3.connect('db.db');
    sql = db.cursor()
    num_facts = sql.execute('SELECT COUNT (*) FROM `facts` ').fetchall()[0][0]  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Å —Ñ–∞–∫—Ç–∞–º–∏ –∏–∑ –ë–î
    fact = sql.execute(f'SELECT `fact` FROM `facts` WHERE `id` = {random.randint(1, num_facts)}').fetchall()
    bot.send_message(message.chat.id, fact)


# ------------------------–ö–û–ù–ï–¶ –†–ê–ë–û–¢–´ –° –ò–ù–¢–ï–†–ï–°–ù–´–ú–ò –§–ê–ö–¢–ê–ú–ò

# ------------------------–ù–ê–ß–ê–õ–û –†–ê–ë–û–¢–´ –° –ú–ï–ù–Æ –°–¢–û–õ–û–í–û–ô

@bot.message_handler(commands=['addmeal', 'meal', 'newmeal'])  # –ö–û–ú–ê–ù–î–´ –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ë–õ–Æ–î–ê –í –ë–î
def addmeal(message):
    if message.text == '0':  bot.send_message(message.chat.id, 'OK');return
    if message.text.isdigit(): bot.send_message(message.chat.id, 'OK')
    meal_name = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞, –¶–µ–Ω—É (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)')
    bot.register_next_step_handler(meal_name, registermeal)


def registermeal(new_meal):
    try:
        meal_price = bot.reply_to(new_meal, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –±–ª—é–¥–∞. 0=–û–¢–ú–ï–ù–ê')
        # bot.register_next_step_handler(meal_name, addmeal2)
        db = sqlite3.connect('db.db');
        sql = db.cursor()
        sql.execute(
            'CREATE TABLE IF NOT EXISTS stolovaya(id INTEGER PRIMARY KEY AUTOINCREMENT, meal TEXT, price REAL, mass INTEGER)');
        sql.execute("INSERT INTO `stolovaya`(meal, price) VALUES ((?),(?))", (new_meal.text.split(',')))
        db.commit()
        lastAdded = sql.execute(' SELECT * FROM `stolovaya` WHERE id= last_insert_rowid() ').fetchall();
        for n in lastAdded:
            print(n)  # –ü–ï–ß–ê–¢–¨ –ø–æ—Å–ª–µ–¥–Ω–µ–Ω–µ–π –∑–∞–ø–∏—Å–∏ –±–ª—é–¥–∞
        bot.register_next_step_handler(meal_price, addmeal)
    except Exception as e:
        bot.reply_to(message, 'oooops')


@bot.message_handler(
    commands=['showmeals', 'vsebluda', 'viewmeals', 'allmeals'])  # –ö–û–ú–ê–ù–î–´ –ü–û–ö–ê–ó–ê –í–°–ï–• –ë–õ–Æ–î –ó–ê–ü–ò–°–ê–ù–ù–´–• –í –ë–î
def show_all_meals_inDB(message):
    log('', message.from_user.first_name)
    db = sqlite3.connect('db.db');
    sql = db.cursor()
    sql.execute(
        'CREATE TABLE IF NOT EXISTS stolovaya(id INTEGER PRIMARY KEY AUTOINCREMENT, meal TEXT, price REAL, mass INTEGER)');
    allmeals = sql.execute("SELECT * FROM stolovaya ORDER BY meal DESC").fetchall()
    for n in allmeals:
        bot.send_message(message.chat.id, f'<b>id {n[0]}-></b>--> <b>{n[1]}</b> –¶–µ–Ω–∞: <b>{n[2]}</b> ')


@bot.message_handler(commands=['makemenu', 'composehmenu', 'viewmeals', 'eda', 'food'])  # –ö–û–ú–ê–ù–î–´ –§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø –ú–ï–ù–Æ
def make_food_menu(message):
    show_all_meals_inDB(message)  # –ü–æ–∫–∞–∂–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–ª—é–¥–∞ —Å –Ω–æ–º–µ—Ä–∞–º–∏
    meals_numbers_for_free_breakfast = bot.send_message(message.chat.id,
                                                        '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –±–ª—é–¥ –¥–ª—è –±—é–¥–∂–µ—Ç–Ω–æ–≥–æ –∑–∞–≤—Ç—Ä–∞–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')
    bot.register_next_step_handler(meals_numbers_for_free_breakfast, make_free_breakfast)


def make_free_breakfast(numFreeBreakfast):
    db = sqlite3.connect('db.db');
    sql = db.cursor()
    sql.execute(
        'CREATE TABLE IF NOT EXISTS menu(date TEXT PRIMARY KEY, breakfast_free TEXT, breakfast_pay TEXT, dinner_free TEXT,dinner_pay TEXT,snack_pay TEXT)');
    # sql.execute( "INSERT INTO menu (date, breakfast_fr) VALUES(datetime('now'), datetime('now', 'localtime'))")#–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–∞—Ç—ã SQLight –Ω–µ –∑–Ω–∞—é –∫–∞–∫ –æ–±—Ä–µ–∑–∞—Ç—å –º–∏–Ω—É—Ç—ã –∏—Ç–¥
    # sql.execute( "INSERT INTO menu (date, breakfast_fr) VALUES((?), datetime('now', 'localtime'))",(datetime.now(),))# –§—É–Ω–∫—Ü–∏—è –¥–∞—Ç—ã –ø–∏—Ç–æ–Ω–æ–≤—Å–∫–∞—è
    sql.execute("INSERT INTO menu (date, breakfast_free) VALUES((?),(?))",
                (datetime.strftime(datetime.now(), "%Y.%m.%d"), numFreeBreakfast.text))  #
    db.commit()


#  allmeals=sql.execute("SELECT * FROM stolovaya ORDER BY meal DESC" ).fetchall()
#  for n in allmeals:
#   bot.send_message(message.chat.id, f'<b>id {n[0]}-></b>--> <b>{n[1]}</b> –¶–µ–Ω–∞: <b>{n[2]}</b> ' )

def show_todays_menu(message):
    log('', message.from_user.first_name)
    db = sqlite3.connect('db.db');
    sql = db.cursor()
    sql.execute(
        'CREATE TABLE IF NOT EXISTS menu(date TEXT PRIMARY KEY, breakfast_free TEXT, breakfast_pay TEXT, dinner_free TEXT,dinner_pay TEXT,snack_pay TEXT)');
    zavtrak_free_meal_numbers = sql.execute('SELECT `breakfast_free` FROM `menu`  ').fetchone()[0].split(',')
    print(zavtrak_free_meal_numbers)
    #  sql.execute('CREATE TABLE IF NOT EXISTS stolovaya(id INTEGER PRIMARY KEY AUTOINCREMENT, meal TEXT, price FLOAT, mass INTEGER)');
    zavtrak_free_sum = ''
    for i in zavtrak_free_meal_numbers:
        zavtrak_free_sum += str(
            sql.execute('SELECT `meal` FROM `stolovaya` WHERE `id` = (?)', (i,)).fetchone()[0]) + " \n"
    print(zavtrak_free_sum)
    #  obed=sql.execute('SELECT `obed` FROM `stolovaya` WHERE `id` = 1').fetchall()[0][0]
    bot.send_message(message.chat.id,
                     '<b>üçéüçâ–ú–ï–ù–Æ:üçìüçä\n<u>–ó–ê–í–¢–†–ê–ö –ë–Æ–î–ñ–ï–¢–ù–´–ô:</u></b>\n' + zavtrak_free_sum + "\n<b><u>–û–ë–ï–î:</u></b>")


# ------------------------–ö–û–ù–ï–¶ –†–ê–ë–û–¢–´ –° –ú–ï–ù–Æ –°–¢–û–õ–û–í–û–ô

# ------------------------–ù–ê–ß–ê–õ–û –†–ê–ë–û–¢–´ –° –õ–ò–ß–ù–´–ú –ö–ê–ë–ò–ù–ï–¢–û–ú
def personal_cabinet(message):
    log('', message.from_user.first_name)
    db = sqlite3.connect('db.db');
    sql = db.cursor();
    # name TEXT, score INTEGER DEFAULT (0), grade INTEGER)
    result = sql.execute('SELECT grade, score FROM users WHERE id= (?) ',
                         (message.from_user.id,)).fetchone();  # print (result)
    if result[0] == 13:
        add_text = '–í—ã —É—á–∏—Ç–µ–ª—å'
    else:
        add_text = f'–í—ã —É—á–µ–Ω–∏–∫ {result[0]} –∫–ª–∞—Å—Å–∞'
    bot.send_message(message.chat.id,
                     f"""–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ <b>{message.from_user.first_name}</b>\n{add_text}\n –í–∞—à —Å—á–µ—Ç: {result[1]} –æ—á–∫–∞(-–æ–≤).\n–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏ –∑–∞–ø–æ–º–∏–Ω–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã, —á—Ç–æ–±—ã –Ω–∞–±—Ä–∞—Ç—å –æ—á–∫–∏.  """)  #


# ------------------------–ö–û–ù–ï–¶ –†–ê–ë–û–¢–´ –° –õ–ò–ß–ù–´–ú –ö–ê–ë–ò–ù–ï–¢–û–ú

# ------------------------–ù–ê–ß–ê–õ–û –†–ê–ë–û–¢–´ –° –í–ò–ö–¢–û–†–ò–ù–û–ô
def quiz(message):
    log('', message.from_user.first_name)
    if message.text == '–í—ã—Ö–æ–¥': welcome(message); return;
    db = sqlite3.connect('db.db');
    sql = db.cursor();
    sql.execute(
        'CREATE TABLE IF NOT EXISTS quiz (id INTEGER PRIMARY KEY AUTOINCREMENT, question TEXT, answer TEXT, theme TEXT, grade INTEGER, hardness INTEGER, hint TEXT, whoadded TEXT)')
    sql.execute(
        'CREATE TABLE IF NOT EXISTS answered_questions(user_id INTEGER, question_id INTEGER, time TEXT, correct BOOLEAN DEFAULT (0))')
    #  num_quest=sql.execute('SELECT COUNT (*) FROM quiz').fetchone()[0] # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏–∑ –ë–î
    #  num_answered_quest=sql.execute('SELECT COUNT (*) FROM answered_questions WHERE user_id=?',(message.from_user.id,)).fetchone()[0] # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    user_grade = sql.execute('SELECT grade FROM users WHERE id=?', (message.from_user.id,)).fetchone()[
        0]  # –ü–û–õ–£–ß–ê–ï–ú –ö–õ–ê–°–° –ß–µ–ª–æ–≤–µ–∫–∞ –ß—Ç–æ–±—ã –Ω–µ –∑–∞–¥–∞—Ç—å —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    print(user_grade)
    # –ü–æ–ª—É—á–∏–º –µ—â–µ –Ω–µ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (—Å–æ–≤–º–µ—Å—Ç–Ω–æ —Å –æ—Ç–≤–µ—Ç–∞–º–∏)
    NA_QUEST = sql.execute(
        'SELECT id, question, answer FROM quiz WHERE id NOT IN(SELECT question_id FROM answered_questions WHERE user_id=? ) AND grade<=(?) ',
        (message.from_user.id, user_grade)).fetchone()
    print(NA_QUEST)
    # NA_QUEST[0] - id —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞; NA_QUEST[2] - –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–≥–æ

    if NA_QUEST == None: bot.send_message(message.chat.id, "–î–ª—è –≤–∞—Å –≤–æ–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç—É. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ! –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å /aq",
                                          reply_markup=markup); return;

    sql.execute('INSERT INTO answered_questions(user_id, question_id, time)VALUES(?,?,?)',
                (message.from_user.id, NA_QUEST[0], datetime.now()))
    db.commit()  # —Å—Ä–∞–∑—É –∑–∞–Ω–µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –≤ —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞

    markup2 = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    markup2.add('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', '–í—ã—Ö–æ–¥')

    ans = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:\n" + str(NA_QUEST[1]),
                           reply_markup=markup2)  # –í—ã–≤–µ–¥–µ–º  –≤–æ–ø—Ä–æ—Å
    bot.register_next_step_handler(ans, quiz_answer_check, NA_QUEST[0],
                                   NA_QUEST[2])  # NA_QUEST[0] - id —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞; NA_QUEST[2] - –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–≥–æ


def quiz_answer_check(message, current_question_id, correct_answer):
    if message.text == '–í—ã—Ö–æ–¥': welcome(message); return;
    if message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        quiz(message);
        return;  # –î–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –¥–∞–ª—å—à–µ –ø–æ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –∏–¥–µ–º

    db = sqlite3.connect('db.db');
    sql = db.cursor();

    if message.text == correct_answer:  # –û—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π –ø—Ä–∏–±–∞–≤–ª—è—á–µ–º –æ—á–∫–∏
        sql.execute('UPDATE users SET score=score+1 where id=(?)',
                    (message.from_user.id,));  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç –∏–≥—Ä–æ–∫—É –Ω–∞ 1
        sql.execute('UPDATE answered_questions SET correct=True WHERE user_id=(?)',
                    (message.from_user.id,))  # –ü–æ–ø—Ä–∞–≤–ª—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –¥–∞–Ω –≤–µ—Ä–Ω–æ
        db.commit()
        current_score = sql.execute('SELECT score FROM users WHERE id=(?)', (message.from_user.id,)).fetchone()[
            0];  # —Ç–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—á–µ—Ç —é–∑–µ—Ä–∞
        markup3 = types.ReplyKeyboardMarkup(one_time_keyboard=True);
        markup3.add('–°–ª–µ–¥—É—é—â–∏–π->', '–í—ã—Ö–æ–¥')
        ans = bot.send_message(message.chat.id,
                               f'–û—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π. –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ 1 –æ—á–∫–æ. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {current_score} –æ—á–∫–∞(-–æ–≤). –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –≤—ã—Ö–æ–¥?',
                               reply_markup=markup3)
        bot.register_next_step_handler(ans, quiz)  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    else:
        markup3 = types.ReplyKeyboardMarkup(one_time_keyboard=True);
        markup3.add('–°–ª–µ–¥—É—é—â–∏–π->', '–í—ã—Ö–æ–¥')
        ans = bot.send_message(message.chat.id,
                               '–ù–µ —Å–æ–≤—Å–µ–º —Ç–∞–∫. –í—ã –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ –æ—á–∫–æ–≤ –Ω–∞ —ç—Ç–æ–º –≤–æ–ø—Ä–æ—Å–µ. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –≤—ã—Ö–æ–¥.',
                               reply_markup=markup3)
        bot.register_next_step_handler(ans, quiz)  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É

    """ –ú–µ–∂–¥—É —Ç–µ–º, –≤–æ –º–Ω–æ–≥–∏—Ö —Å–ª—É—á–∞—è—Ö –º–æ–∂–Ω–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
–≤–ª–æ–∂–µ–Ω–Ω—É—é –≤—ã–±–æ—Ä–∫—É. –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—Ä–æ—Å:

SELECT * FROM table1 WHERE id IN (SELECT id FROM table2);
–º–æ–∂–Ω–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:

SELECT table1.* FROM table1,table2 WHERE table1.id=table2.id;"""


@bot.message_handler(
    commands=['addquestion', 'addq', 'newquestion', 'newq'])  # –ö–û–ú–ê–ù–î–´ –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í–û–ü–†–û–°–ê –î–õ–Ø –í–ò–ö–¢–û–†–ò–ù–´
def add_quiz_question(message):
    log('–ü—ã—Ç–∞—é—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞', message.from_user.first_name)
    if message.text == '0':  bot.send_message(message.chat.id, 'OK',
                                              reply_markup=markup);return  # –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–±–∏—Ä–∞–µ—Ç—Å—è
    nq = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.')
    bot.register_next_step_handler(nq,add_quest2)


def add_quest2(message):
    new_ans = bot.send_message(message.chat.id, f'–í—ã –≤–≤–µ–ª–∏ –≤–æ–ø—Ä–æ—Å {message.text} \n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:')
    bot.register_next_step_handler(new_ans, add_quest3, message.text)

def add_quest3(message, new_question ):
        new_ans = bot.send_message(message.chat.id, f'–í—ã –≤–≤–µ–ª–∏ –æ—Ç–≤–µ—Ç {message.text} \n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å (1-11):')
        bot.register_next_step_handler(new_ans, add_quest4, new_question, message.text)

def add_quest4(message, new_question, new_answer):
    grade = bot.send_message(message.chat.id,
                                       f'–í—ã –≤–≤–µ–ª–∏ –∫–ª–∞—Å—Å {message.text} \n –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ –ø—Ä–µ–º–µ—Ç –≤–æ–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä. –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞)')
    bot.register_next_step_handler(grade, add_quest5, new_question, new_answer, message.text)

def add_quest5 (message, new_question, new_answer, grade):
    theme=message.text
    bot.send_message(message.chat.id,f'–í–≤–µ–¥–µ–Ω–∞ —Ç–µ–º–∞: {message.text}\n –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å', reply_markup=markup  )
    db = sqlite3.connect('db.db');
    sql = db.cursor()
    sql.execute(
        'CREATE TABLE IF NOT EXISTS quiz (id INTEGER PRIMARY KEY AUTOINCREMENT, question TEXT, answer TEXT, theme TEXT, grade INTEGER, hardness INTEGER, hint TEXT, whoadded TEXT)')

    sql.execute("INSERT INTO  quiz (question, answer, theme,grade) VALUES ( ?,?,?,? )", (new_question,new_answer,theme, grade)) # –ó–∞–Ω–æ—Å–∏–º –≤ –ë–î –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    db.commit()
    factsList = sql.execute(' SELECT * FROM  quiz ').fetchall();
   # for n in factsList:        print(n)  # –ü–ï–ß–ê–¢–¨ –í–°–ï–• –≤–æ–ø—Ä–æ—Å–æ–≤

@bot.message_handler(
    commands=['aq'])  # –ö–û–ú–ê–ù–î–´ –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í–û–ü–†–û–°–ê –î–õ–Ø –í–ò–ö–¢–û–†–ò–ù–´ –î–†–£–ì–û–ô –í–ê–†–ò–ê–ù–¢
def addnewquest(message):
    log('–ü—ã—Ç–∞—é—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞', message.from_user.first_name)
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –≤ –¥–≤–æ–π–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö. –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∏–ª–∏ –±—É–∫–≤—ã –≤–∞—Ä–∏–∞–Ω—Ç–∞.  –ù–∞–ø—Ä–∏–º–µ—Ä');
    bot.send_message(message.chat.id, '–í –∫–∞–∫–æ–º –≥–æ–¥—É —Ä–æ–¥–∏–ª—Å—è –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü—É—à–∫–∏–Ω?<b>((1799))</b>');
    bot.send_message(message.chat.id, '–ò–ª–∏ —Ç–∞–∫');
    bot.send_message(message.chat.id, '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç –ü—É—à–∫–∏–Ω —Å–≤–æ—é –Ω—è–Ω—é –≤ —Å—Ç–∏—Ö–∞—Ö?\n1)–ø–æ–¥—Ä—É–≥–∞ —Å—É—Ä–æ–≤—ã—Ö –¥–Ω–µ–π;\n2)–º–æ—è —Ä–æ–¥–Ω–∞—è;\n3)–≥–æ–ª—É–±–∫–∞<b>((1))</b>');


    nq = bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.')
    bot.register_next_step_handler(nq,add_qst2)


def add_qst2(message):
    s=message.text
    try:
        que=s[:s.index('((')]
        ans=s[s.index('((') + 2:s.index('))')]

        markup2 = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup2.add( '–ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å')
        grade = bot.send_message(message.chat.id, f'–í—ã –≤–≤–µ–ª–∏ –≤–æ–ø—Ä–æ—Å {que} \n\n –û—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–≥–æ {ans}. –í–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å(1-11)',
                                   reply_markup=markup2)
        bot.register_next_step_handler(grade, commitquest , que,ans )


    except Exception as e:
       print('–û—à–∏–±–∫–∞:\n', traceback.format_exc())
       nq = bot.send_message(message.chat.id, '–ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å. –ù–∞–ø–∏—à–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –≤–æ–ø—Ä–æ—Å —Å –æ—Ç–≤–µ—Ç–æ–º –≤ –¥–≤–æ–π–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö')
       bot.register_next_step_handler(nq, add_qst2)

def commitquest (message, new_question, new_answer):
    grade=message.text
    if message.text=='–ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å': addnewquest(message); return;
    elif message.text.isdigit():
        g=int(message.text)
        if g<1 or g>11:
            g=1
        db = sqlite3.connect('db.db');
        sql = db.cursor()
        sql.execute(
            'CREATE TABLE IF NOT EXISTS quiz (id INTEGER PRIMARY KEY AUTOINCREMENT, question TEXT, answer TEXT, theme TEXT, grade INTEGER, hardness INTEGER, hint TEXT, whoadded TEXT)')

        sql.execute("INSERT INTO  quiz (question, answer, whoadded, grade) VALUES ( ?,?,?,? ) ", (new_question, new_answer, message.from_user.first_name, g) )
        db.commit()
        bot.send_message(message.chat.id,f' –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å', reply_markup=markup  )





# ------------------------–ö–û–ù–ï–¶ –†–ê–ë–û–¢–´ –° –í–ò–ö–¢–û–†–ò–ù–û–ô

# ------------------------–ù–ê–ß–ê–õ–û –†–ê–ë–û–¢–´ –° –ß–ê–¢–û–ú (–°–¢–ï–ù–û–ô –û–ë–™–Ø–í–õ–ï–ù–ò–ô)

def show_wall(message):
    log('', message.from_user.first_name)
    db = sqlite3.connect('db.db');
    sql = db.cursor()

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.add('–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–Ω–∏–µ(–ø–æ–∫–∞ –Ω–µ—Ç)', '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

    sql.execute(
        'CREATE TABLE IF NOT EXISTS wall (id INTEGER PRIMARY KEY AUTOINCREMENT, user_msg TEXT, date TEXT, user_id INTEGER)')
    wall_msgs = sql.execute(
        'SELECT date, user_id, user_msg FROM wall ORDER BY id DESC LIMIT 6').fetchall()  # –í–´–í–û–î–ò–ú 6 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –°–û–û–ë–©–ï–ù–ò–ô
    for m in reversed(wall_msgs):  # –°–ù–ê–ß–ê–õ–ê –ø–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏—Ö id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
        name = sql.execute('SELECT name FROM users WHERE id=(?)', (m[1],)).fetchone()[0];  # print (name)
        bot.send_message(message.chat.id,
                         f'date:{m[0]} <b>{name}</b> –ù–∞–ø–∏—Å–∞–ª:\n {m[2]}');  # print(m)# –í—ã–≤–µ–ª–∏ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    ans = bot.send_message(message.chat.id, "<b><u>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ></u></b>", reply_markup=markup)
    bot.register_next_step_handler(ans, add_wall_msg1)


def add_wall_msg1(message):
    if message.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        welcome(message);
        return;
    elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ':
        ans = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
        bot.register_next_step_handler(ans, add_wall_msg2);  # print ("–∞ —á—Ç–æ –≤ ans –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ?",ans)
    else:
        welcome(message)


def add_wall_msg2(message):
    log('', message.from_user.first_name)
    if message.text == None:  bot.send_message(message.chat.id, "–í–≤–µ–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç", reply_markup=markup); welcome(
        message); return;
    db = sqlite3.connect('db.db');
    sql = db.cursor()
    sql.execute('INSERT INTO wall (user_msg, date, user_id) VALUES (? ,?, ?)',
                (message.text, datetime.strftime(datetime.now(), "%y%m%d|%H:%M:%S"), (message.from_user.id)))
    db.commit()
    show_wall(message)


# ------------------------–ö–û–ù–ï–¶ –†–ê–ë–û–¢–´ –° –ß–ê–¢–û–ú (–°–¢–ï–ù–û–ô –û–ë–™–Ø–í–õ–ï–ù–ò–ô)

def question(message):
    log('', message.from_user.first_name)
    markup = types.InlineKeyboardMarkup(row_width=2)
    item1 = types.InlineKeyboardButton("–ö–æ–Ω–µ—á–Ω–æ", callback_data='yes')
    item2 = types.InlineKeyboardButton("–ù–µ –æ—Å–æ–±–æ", callback_data='no')
    markup.add(item1, item2)
    bot.send_message(message.chat.id, '–ù—É–∂–µ–Ω –ª–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å–≤–æ–π –ë–æ—Ç?', reply_markup=markup)


def best_score(message):
    #  pic=open('me.jpg','rb');  bot.send_photo(message.chat.id,pic);
    # pic=open('me2.jpg','rb'); bot.send_photo(message.chat.id,pic)
    db = sqlite3.connect('db.db');
    sql = db.cursor();
    sql.execute(
        'CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY , name TEXT, score INTEGER DEFAULT (0), grade INTEGER)')
    best_sorted = sql.execute('SELECT name, score FROM users ORDER BY score DESC').fetchall();
    if len(best_sorted) == 0: bot.send_message(message.chat.id, '–ù–µ—Ç –Ω–∏–∫–æ–≥–æ'); return;
    ttt = '';
    place = 1
    for person in best_sorted:
        ttt += str(place) + '–º–µ—Å—Ç–æ <b>' + person[0] + '</b>      –æ—á–∫–æ–≤:    ' + str(person[1]) + '\n';
        place += 1;
    bot.send_message(message.chat.id, ttt)


@bot.message_handler(content_types=['text'])
def lalala_main_text_message_handler(message):
    if message.text == '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —É—Ä–æ–∫–æ–≤':
        bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ " + str(datetime.now()) + '–≠—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –µ—â–µ –Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏')
    elif message.text == '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç':
        personal_cabinet(message)
    elif message.text == '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ (QUIZ)':
        quiz(message)
    elif message.text == '–í–æ–ø—Ä–æ—Å':
        question(message)
    elif message.text == '–ö–æ–Ω—Ç–∞–∫—Ç—ã':
        bot.send_message(message.chat.id, '–ù–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω +7 \n–ê–¥—Ä–µ—Å: –≥.–ú–æ—Å–∫–≤–∞\n –ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –±–æ—Ç–∞ @hasanella')
    elif message.text == '–°—Ç–µ–Ω–∞ –≤–∞—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π':
        show_wall(message)
    elif message.text == '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç':
        view_fact(message)
    elif message.text == '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏':
        latest_news(message)
    elif message.text == 'ü•ï–°–µ–≥–æ–¥–Ω—è –≤ —Å—Ç–æ–ª–æ–≤–æ–πü•ï':
        show_todays_menu(message)
    elif message.text == '–õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã':
        best_score(message)

    else:
        bot.send_message(message.chat.id, message.text + ' –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ üò¢')


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        print(call.message)
        if call.message:
            if call.data == 'yes':
                bot.send_message(call.message.chat.id, '–ú–æ–ª–æ–¥–µ—Ü! –î–∞–≤–∞–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å üòä')
            elif call.data == 'no':
                bot.send_message(call.message.chat.id, '–ó—Ä—è üò¢')
                bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
                                          text=" –ë–æ—Ç –æ–±–∏–¥–µ–ª—Å—è ")
            # remove inline buttons
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ü–æ–Ω—è—Ç–Ω–æ",
                                  reply_markup=None)
    except Exception as e:
        print(repr(e))


# log('',message.from_user.first_name)
def log(txt='', user='unknown'):
    if True:  # Turn off logging
        db = sqlite3.connect('db.db');
        sql = db.cursor()
        sql.execute(
            'CREATE TABLE IF NOT EXISTS logs(id INTEGER PRIMARY KEY AUTOINCREMENT, logtext TEXT, logtime TEXT, user TEXT)')
        if txt == '':
            import traceback
            txt = traceback.extract_stack(None, 2)[0][2]  # print (txt) # –ò–ú–Ø —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –≤—ã–∑–≤–∞–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é log()
        sql.execute('INSERT INTO logs (user, logtext, logtime) VALUES(? ,?, ?)', (str(user), txt, datetime.now()))
        db.commit()


# RUN
import time
import traceback
#bot.polling(none_stop=True)

while True:

     try:

         print("Start polling")
         bot.skip_pending = True  # –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
         #bot.send_message(1680608864,traceback.format_exc())
         bot.polling(none_stop=True)
     except Exception as e:
         mytext= traceback.format_exc()
         print('–û—à–∏–±–∫–∞:\n', traceback.format_exc() )
         time.sleep(15)
